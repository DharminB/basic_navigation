#! /usr/bin/env python

from __future__ import print_function

import rospy
import rostopic
import tf
from nav_msgs.msg import Odometry

class OdomTfPublisher(object):

    """Publish ros transform after reading odom gazebo messages"""

    def __init__(self):
        rospy.sleep(3) # time to let simulator initialise completely
        odom_topic = rostopic.find_by_type('nav_msgs/Odometry')
        rospy.loginfo("Subscribing to following odom topics")
        rospy.loginfo(odom_topic)
        self.odom_subs = []
        for topic in odom_topic:
            sub = rospy.Subscriber(topic, Odometry, self.odom_cb)
            self.odom_subs.append(sub)
        self.tf_br = tf.TransformBroadcaster()

    def odom_cb(self, msg):
        robot_name = msg.child_frame_id.split('/')[1]
        pose = msg.pose.pose
        pos = [pose.position.x, pose.position.y, pose.position.z]
        ori = [pose.orientation.x, pose.orientation.y, pose.orientation.z, pose.orientation.w]
        self.tf_br.sendTransform(pos, ori, rospy.Time.now(),
                                 robot_name+'/base_link', robot_name+'/odom')
        # self.tf_br.sendTransform([0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0],
        #                          rospy.Time.now(), robot_name+'/odom', '/world')

if __name__ == "__main__":
    rospy.init_node('odom_tf_pub')
    OBJ = OdomTfPublisher()
    rospy.loginfo("Started OdomTfPublisher")
    rospy.spin()
