#! /usr/bin/env python

from __future__ import print_function

import tf
import rospy
from std_msgs.msg import Empty, String
from nav_msgs.msg import Path, Odometry
from geometry_msgs.msg import PoseStamped, PointStamped
from geometry_msgs.msg import Twist, PoseWithCovarianceStamped

from basic_navigation.utils import Utils
from basic_navigation.laser_utils import LaserUtils
from basic_navigation.optimiser import Optimiser
from basic_navigation.model import Model

class SimpleMPController(object):
    def __init__(self):
        # Publishers
        self._debug_traj_pub = rospy.Publisher('~debug_traj', Path, queue_size=1)
        self._goal_pub = rospy.Publisher('~local_goal', PoseWithCovarianceStamped, queue_size=1)

        # Subscribers

        # Class variables
        self.global_frame = rospy.get_param('~global_frame', 'map')
        self.robot_frame = rospy.get_param('~robot_frame', 'load/base_link')
        default_control_time = rospy.get_param('~default_control_time', 1.0)

        self._tf_listener = tf.TransformListener()

        self.laser_utils = LaserUtils(debug=False, only_use_half=True)
        footprint = rospy.get_param('~footprint', [[-0.33, 0.33], [0.33, 0.33],
                                                   [0.33, -0.33], [-0.33, -0.33]])
        self.laser_utils.set_footprint(footprint)
        footprint_padding = rospy.get_param('~footprint_padding', 0.1)
        self.laser_utils.set_footprint_padding(footprint_padding)
        self.model = Model(default_control_time=default_control_time)

        #      ((px   py   pa ), (vx   vy   va ), (tpx  tpy  tpa), (tvx  tvy  tva))
        self.goal = ((2.5, 0.0, 0.0), (0.0, 0.0, 0.0), (0.1, 0.1, 0.1), (0.0, 0.0, 0.0))

        rospy.sleep(1.0)
        rospy.loginfo('Initialised')

    def test(self):
        acc_list = [
                (0.1, 0.0, 0.0),
                (0.0, 0.0, 0.1),
                (0.0, 0.0, 0.1),
                (0.0, 0.0, 0.1),
                (0.0, 0.0, 0.1),
                (0.0, 0.0, 0.1),
                ]
        trajectory = self.model.get_trajectory([0.0, 0.0, 0.0], acc_list)
        # for future_pos in trajectory:
        #     print(future_pos)

        # visualise trajectory
        self.visualise_trajectory(trajectory)

        # visualise goal
        goal_pos = self.goal[0]
        pose_cov_msg = PoseWithCovarianceStamped()
        pose_cov_msg.header.stamp = rospy.Time.now()
        pose_cov_msg.header.frame_id = self.robot_frame
        pose_cov_msg.pose.pose = Utils.get_pose_from_x_y_theta(*goal_pos)
        pose_cov_msg.pose.covariance[0] = 0.1
        pose_cov_msg.pose.covariance[7] = 0.1
        pose_cov_msg.pose.covariance[14] = 0.0
        pose_cov_msg.pose.covariance[21] = 0.0
        pose_cov_msg.pose.covariance[28] = 0.0
        pose_cov_msg.pose.covariance[35] = 0.1
        # print(pose_cov_msg)
        self._goal_pub.publish(pose_cov_msg)

        rospy.sleep(1.0)

    def test2(self):
        constraints = {
                        'max_acc':[0.1, 0.1, 0.1],
                        'min_acc':[-0.1, -0.1, -0.1],
                        'max_vel':[0.25, 0.25, 0.5],
                        'min_vel':[0.0, -0.25, -0.5]
                        }
        points = self.laser_utils.get_points()
        print(len(points))
        constraints['points'] = points[::2]
        print(len(constraints['points']))
        current_vel = [0.0, 0.0, 0.0]
        control_horizon = 10
        prediction_horizon = 10
        start_time = rospy.Time.now()
        # cost, optimal_u = Optimiser.calc_optimal_u_gradient_descent(
        #                     self.model, self.goal, current_vel=current_vel,
        #                     control_horizon=control_horizon,
        #                     prediction_horizon=prediction_horizon,
        #                     initial_u=None, constraints=constraints)
        # cost, optimal_u = Optimiser.calc_optimal_u_line_search(
        #                      self.model, self.goal, current_vel=current_vel,
        #                      control_horizon=control_horizon,
        #                      prediction_horizon=prediction_horizon,
        #                      initial_u=None, constraints=constraints)
        cost, optimal_u = Optimiser.calc_optimal_u_conjugate_gradient_descent(
                            self.model, self.goal, current_vel=current_vel,
                            control_horizon=control_horizon,
                            prediction_horizon=prediction_horizon,
                            initial_u=None, constraints=constraints)
        end_time = rospy.Time.now()
        duration = end_time - start_time
        print("Time:", duration.to_sec())
        print("CONTROL")
        Optimiser.print_u_and_cost(optimal_u, cost)
        for _ in range(prediction_horizon-control_horizon):
            optimal_u.append((0.0, 0.0, 0.0))
        trajectory = self.model.get_trajectory(current_vel, optimal_u)
        velocities = [t[1] for t in trajectory]
        print("VELOCITY")
        Optimiser.print_u_and_cost(velocities, 0.0)
        self.visualise_trajectory(trajectory)
        rospy.sleep(1.0)

    def visualise_trajectory(self, trajectory):
        future_poses = [i[0] for i in trajectory]
        future_poses.insert(0, (0.0, 0.0, 0.0))
        path_msg = Utils.get_path_msg_from_poses(future_poses, self.robot_frame)
        self._debug_traj_pub.publish(path_msg)

if __name__ == "__main__":
    rospy.init_node('simple_mp_controller')
    SMPC = SimpleMPController()
    SMPC.test()
    SMPC.test2()
    # rospy.spin()
    rospy.loginfo('Exiting.')
